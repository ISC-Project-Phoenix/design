# polynomial_planner

## Summary

This node plans a path by porjecting points into the center of the track. The general idea is to model the bounds of the tracks 
as polynomials, which are differentiable. The polynomials act as the bounds of the track which let inadverity prevents us from 
crossing off the track.

A benefit of this approach is that planning is local and very fast, which allows it to be used without localisation.

### Subscribes

- 'TBD' 'TODO' `polynomials` - Polynomial regression is applied to tracked white lines to track. TBD what frame are they in?

### Publishes

- `/path` - a nav_msgs Path to follow. These will be in our odom frame.

### Algorithm

The planner works its magic in the backend, we take the polynomials and differentiate at points on a fixed interial. The dx/dy 
is treated as a vector and its Orthogonal complements are generated and scaled accoridng. 'TBD' whether or not these will account 
for the dept of in camera space or on a fixed scaler in ROS space.


Our backend implementation is considerably simpler. It simply takes these right left sets, and creates
a path by pairing them and finding midpoints.

1. Validate each if polynomial is not null
2. Loop through each polynomial
3. For each point on the interval
    1. Find the deravtive with repect to x
    2. assgin it to dx, assume dy as 1
    3. normalize dx/dy as if it were a vector 
        1. (We are now in vectorspace)
    4. Calulate Polynomial ( x ), which is assgined to Y
        1. x is the current i
    5. we then create the projected vector
        1. since it is created with the normalize dx/dy its magnitude is 1
        2. therefore will Scale with our scalur at its full value
        3. for projecting from left to right, [(x + 7 * dy), (y - 7 * dx)]
        4. for right to left, [(x - 7 * dy), (y + 7 * dx )]
    6. We store these points in the Path Array. 
5. Transform the path array into odom
    1. effectively just giving them a timestamp
